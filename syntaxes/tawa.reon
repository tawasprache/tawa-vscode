pick.deep: macro [values indexes res:][
	res: values

	foreach index indexes [
		res: pick res index
	]

	return res
]


ident: "\b[[:alpha:]]\w*\b"
ident-path: "\b[[:alpha:]]\w*(?::[[:alpha:]]\w*)*\b"

variant-path: rejoin ["#" skip ident-path 2]

type-path-contents: compose.deep #(
	patterns [
		#(
			match (ident)
			name "entity.name.type.tawa"
		)
		#(
			begin ":"
			beginCaptures [#(name "keyword.operator.tawa")]

			end (ident)
			endCaptures [#(name "entity.name.type.tawa")]
		)
	]
)

variant-path-contents: copy.deep type-path-contents
extend
	pick.deep variant-path-contents [patterns 0]
	'match
	rejoin ["#|" ident]

end-pattern-branch: rejoin [
	"(?="
		variant-path "(?:\s*\(.*?\))?\s*=>"
		"|"
		"\bbeende\b"
	")"
]


#(
	name "Tawa"
	scopeName "source.tawa"
	fileTypes ["tawa"]
	
	patterns [
		#(include #comments)
		#(include #module)
	]

	repository #(
		comments #(
			patterns [
				#(
					begin "//"
					end "$"
					name "comment.tawa"
				)
				#(
					begin "/\*"
					end "\*/"
					name "comment.tawa"
				)
			]
		)

		empty #(
			patterns [
				#(match "\s+")
				#(include #comments)
			]
		)

		invalid #(
			match "."
			name "invalid.illegal.tawa"
		)

		comma #(
			match ","
			name "punctuation.separator.comma.tawa"
		)


		;== Modules

		module #(
			begin "\bpaket\b"
			beginCaptures [#(name "keyword.tawa")]

			end "(?=end)never"

			patterns [
				#(include #empty)
				#(
					begin (ident)
					beginCaptures [#(name "entity.name.type.tawa")]

					end "(?=end)never"

					patterns [
						#(include #empty)
						#(
							begin "\bzeigt\b"
							beginCaptures [#(name "keyword.tawa")]

							end "(?=end)never"

							patterns [
								#(include #empty)
								#(
									begin "\("
									end "(?=end)never"
									patterns [
										#(include #empty)
										#(
											match (ident)
											name "entity.name.type.tawa"
										)
										#(
											begin "\)"
											end "(?=end)never"
											patterns [
												#(include #empty)
												#(include #after-module)
											]
										)
									]
								)
								#(
									begin "\b(?:alles|nichts)\b"
									beginCaptures [#(name "keyword.tawa")]

									end "(?=end)never"

									patterns [
										#(include #empty)
										#(include #after-module)
									]
								)

								#(include #invalid)
							]
						)
					]
				)
			]
		)
		
		after-module #(
			patterns [
				#(include #empty)
				#(include #native)
				#(include #import)
				#(include #decl)
			]
		)


		;== Native code

		native #(
			begin "¤"
			beginCaptures [#(name "keyword.tawa")]

			end {(?<=[`"])}

			patterns [
				#(include #empty)
				#(
					begin "(\|)\s*(\w+)(:)"
					beginCaptures #(
						1 #(name "keyword.operator.tawa")
						2 #(name "constant.language.tawa")
						3 #(name "keyword.operator.tawa")
					)

					end {(?<=[`"])}

					patterns [
						#(include #empty)
						#(
							begin "`"
							end "`"
							name "string.tawa"
						)
						#(
							begin {"}
							end {"}
							name "string.tawa"
							patterns [
								#(
									match "\\[abfnrtv\\'^"]"
									name "constant.character.escape.tawa"
								)
							]
						)
					]
				)
			]
		)


		;== Imports

		import #(
			begin "\bimport\b"
			beginCaptures [#(name "keyword.tawa")]

			end "$"

			patterns [
				#(include #empty)
				#(
					begin (ident-path)
					beginCaptures [(type-path-contents)]

					end "$"

					patterns [
						#(include #empty)
						#(
							begin "(?!\s|$|/[/*]|:)"
							end "$"
							patterns [
								#(include #empty)
								#(
									begin "\bals\b"
									beginCaptures [#(name "keyword.tawa")]

									end (ident-path)
									endCaptures [(type-path-contents)]
								)
								#(
									begin "\bzeigende\b"
									beginCaptures [#(name "keyword.tawa")]

									end "$"

									patterns [
										#(include #empty)
										#(
											begin "\("
											end "\)"
											patterns [
												#(include #empty)
												#(
													match (ident)
													name "entity.name.type.tawa"
												)
											]
										)
										#(
											match "\balles\b"
											name "keyword.tawa"
										)
									]
								)
							]
						)
					]
				)
			]
		)


		;== Decls

		decl #(
			patterns [
				#(include #decl.type)
				#(include #decl.func)
			]
		)


		;== Type decls

		decl.type #(
			begin "\btyp\b"
			beginCaptures [#(name "keyword.tawa")]

			end "\bbeende\b"
			endCaptures [#(name "keyword.tawa")]

			patterns [
				#(include #empty)
				#(
					begin (ident)
					beginCaptures [#(name "entity.name.type.tawa")]

					end "(?=\bbeende\b)"

					patterns [
						#(include #empty)
						#(
							begin "\["
							end "\]"
							patterns [
								#(include #empty)
								#(
									match (ident)
									name "entity.name.type.tawa"
								)
								#(include #comma)
							]
						)
						#(
							begin "\bist\b"
							beginCaptures [#(name "keyword.tawa")]

							end "(?=\bbeende\b)"
							
							patterns [
								#(include #empty)
								#(
									begin (ident)
									beginCaptures [#(name "variable.tawa")]
									
									end "$|(?=\bbeende\b)"
									
									patterns [
										#(include #empty)
										#(
											begin ":"
											beginCaptures [#(name "keyword.operator.tawa")]

											end "$|(?=\bbeende\b)"
									
											patterns [
												#(include #empty)
												#(include #type)
											]
										)
									]
								)
								#(
									begin "\|"
									beginCaptures [#(name "keyword.operator.tawa")]

									end "$|(?=\bbeende\b)"

									patterns [
										#(
											begin (ident)
											beginCaptures [#(name "entity.name.type.tawa")]

											end "$|(?=\bbeende\b)"

											patterns [
												#(include #empty)
												#(
													begin "\("
													end "$|(?=\bbeende\b)"
													patterns [
														#(
															begin (ident)
															beginCaptures [#(name "variable.parameter.tawa")]
															
															end "(?=[,)])"
															
															patterns [
																#(include #empty)
																#(
																	begin ":"
																	beginCaptures [#(name "keyword.operator.tawa")]

																	end "(?=[,)])"
															
																	patterns [
																		#(include #empty)
																		#(include #type)
																	]
																)
															]
														)
														#(include #comma)
														#(
															begin "\)"
															end "$|(?=\bbeende\b)"
															patterns [
																#(include #empty)
															]
														)
													]
												)
											]
										)
									]
								)
							]
						)
					]
				)
			]
		)


		;== Function decls

		decl.func #(
			begin "\bfunk\b"
			beginCaptures [#(name "keyword.tawa")]

			end "(?=\b(?:funk|typ)\b)"

			patterns [
				#(include #empty)
				#(
					begin (ident)
					beginCaptures [#(name "entity.name.function.tawa")]

					end "(?=\b(?:funk|typ)\b)"

					patterns [
						#(include #empty)
						#(
							begin "\["
							end "\]"
							patterns [
								#(include #empty)
								#(
									match (ident)
									name "entity.name.type.tawa"
								)
								#(include #comma)
							]
						)
						#(
							begin "\("
							end "(?=\b(?:funk|typ)\b)"
							patterns [
								#(
									begin (ident)
									beginCaptures [#(name "variable.parameter.tawa")]
									
									end "(?=[,)])"
									
									patterns [
										#(include #empty)
										#(
											begin ":"
											beginCaptures [#(name "keyword.operator.tawa")]

											end "(?=[,)])"
									
											patterns [
												#(include #empty)
												#(include #type)
											]
										)
									]
								)
								#(include #comma)
								#(
									begin "\)"
									end "(?=\b(?:funk|typ)\b)"
									patterns [
										#(include #empty)
										#(
											begin ":"
											beginCaptures [#(name "keyword.operator.tawa")]

											end "(?=[-=]>|$)"

											patterns [
												#(include #empty)
												#(include #type)
											]
										)
										#(
											begin "[-=]>|$"
											beginCaptures [#(name "keyword.operator.tawa")]

											end "(?=\b(?:funk|typ)\b)"

											patterns [
												#(include #empty)
												#(include #expr)
											]
										)
									]
								)
							]
						)
					]
				)
			]
		)


		;== Types

		type #(
			patterns [
				#(
					match "§[[:alpha:]]\w*\b"
					name "entity.name.type.tawa"
				)
				#(
					begin (rejoin ["(" ident-path ")\["])
					beginCaptures #(
						1 (type-path-contents)
					)

					end "\]"

					patterns [
						#(include #empty)
						#(include #type)
						#(include #comma)
					]
				)
				#(
					match (ident-path)
					captures [(type-path-contents)]
				)
			]
		)


		;== Expressions

		expr #(
			patterns [
				#(include #~number)
				#(include #~character)
				#(include #~string)
				#(include #~paren)
				#(include #~operator)
				#(include #~match)
				#(include #~field)
				#(include #~call)
				#(include #~ctor)
				#(include #~update)
				#(include #~native)
				#(include #~ident)
			]

			repository #(
				~number #(
					patterns [
						#(
							match "\b0[xX]_?\h+(?:_\h+)*i?\b"
							name "constant.numeric.integer.tawa"
						)
						#(
							match "\b0[bB]_?[01]+(?:_[01]+)*i?\b"
							name "constant.numeric.integer.tawa"
						)
						#(
							match "\b0[oO]_?[0-7]+(?:_[0-7]+)*i?\b"
							name "constant.numeric.integer.tawa"
						)
						#(
							match "\b\d+(?:_\d+)*\.(?:\d*[eE][+-]?\d+(?:_\d+)*i?\b|\d+i?\b|i\b|(?!\.{2}))"
							name "constant.numeric.decimal.tawa"
						)
						#(
							match "(?<!\d|\.{2})\.\d+(?:[eE][+-]?\d+(?:_\d+)*)?i?\b"
							name "constant.numeric.decimal.tawa"
						)
						#(
							match "\b\d+(?:_\d+)*(?:[eE][+-]?\d+(?:_\d+)*)?i?\b"
							name "constant.numeric.integer.tawa"
						)
						#(
							match "\b(?:0[xX])?(?:\h+(?:_\h+)*(?:\.\h*)?|\.\h+)[pP][+-]?\h+i?\b"
							name "constant.numeric.hex.tawa"
						)
					]
				)

				~escape #(
					match "\\[abfnrtv\\'^"]"
					name "constant.character.escape.tawa"
				)

				~character #(
					begin "'"
					end "'"
					name "string.character.tawa"
					patterns [
						#(include #~escape)
					]
				)

				~string #(
					patterns [
						#(
							begin {"}
							end {"}
							name "string.tawa"
							patterns [
								#(include #~escape)
							]
						)
						#(
							begin "`"
							end "`"
							name "string.tawa"
						)
					]
				)

				~paren #(
					begin "\("
					end "\)"
					patterns [
						#(include #empty)
						#(include #expr)
					]
				)

				~operator #(
					patterns [
						#(
							match "[-+*\/%]"
							name "keyword.operator.arithmetic.tawa"
						)
						#(
							match "(?:<<|>>|&\^^|[&|^^])"
							name "keyword.operator.bitwise.tawa"
						)
						#(
							match "&&|\|\||==|[!<>]=?"
							name "keyword.operator.comparison.tawa"
						)
					]
				)

				~match #(
					begin "\bpasst\b"
					beginCaptures [#(name "keyword.tawa")]

					end "\bbeende\b"
					endCaptures [#(name "keyword.tawa")]

					patterns [
						#(include #empty)
						#(
							begin "\bzu\b"
							beginCaptures [#(name "keyword.tawa")]

							end "(?=\bbeende\b)"

							patterns [
								#(include #empty)
								#(
									begin (variant-path)
									beginCaptures [(variant-path-contents)]

									end (end-pattern-branch)

									patterns [
										#(include #empty)
										#(
											begin "\("
											end "\)"
											patterns [
												#(include #empty)
												#(
													match (ident)
													name "variable.tawa"
												)
												#(include #comma)
											]
										)
										#(
											begin "=>"
											beginCaptures [#(name "keyword.operator.tawa")]

											end (end-pattern-branch)

											patterns [
												#(include #empty)
												#(include #expr)
											]
										)
									]
								)
							]
						)
						#(include #expr)
					]
				)

				~field #(
					match (rejoin ["(\.)(" skip ident 2 ")"])
					captures #(
						1 #(name "keyword.operator.tawa")
						2 #(name "variable.tawa")
					)
				)

				~call #(
					begin "\b((?:[[:alpha:]]\w*:)*)([[:alpha:]]\w*)\s*\("
					beginCaptures #(
						1 #(patterns [
							#(
								match (ident)
								name "entity.name.type.tawa"
							)
							#(
								match ":"
								name "keyword.operator.tawa"
							)
						])
						2 #(name "entity.name.function.tawa")
					)

					end "\)"

					patterns [
						#(include #empty)
						#(include #expr)
						#(include #comma)
					]
				)

				~fields #(
					begin (ident)
					beginCaptures [#(name "variable.tawa")]

					end "(?=\})"

					patterns [
						#(include #empty)
						#(
							begin "="
							beginCaptures [#(name "keyword.operator.tawa")]

							end "(?=\})"

							patterns [
								#(include #empty)
								#(
									begin ","
									end "(?=\})"
									patterns [
										#(include #empty)
										#(include #~fields)
									]
								)
								#(include #expr)
							]
						)
					]
				)

				~ctor #(
					begin (variant-path)
					beginCaptures [(variant-path-contents)]

					end "(?!\s*[({])"

					patterns [
						#(include #empty)
						#(
							begin "\("
							end "\)"
							patterns [
								#(include #empty)
								#(include #expr)
								#(include #comma)
							]
						)
						#(
							begin "\{"
							end "\}"
							patterns [
								#(include #empty)
								#(include #~fields)
							]
						)
					]
				)

				~update #(
					begin "\{"
					end "\}"
					patterns [
						#(include #empty)
						#(
							begin "\|"
							beginCaptures [#(name "keyword.operator.tawa")]

							end "(?=\})"

							patterns [
								#(include #empty)
								#(include #~fields)
							]
						)
						#(include #expr)
					]
				)

				~native #(
					begin "¤"
					beginCaptures [#(name "keyword.tawa")]

					end {(?<=[`"])}

					patterns [
						#(include #empty)
						#(include #type)
						#(
							begin "(\|)\s*(\w+)(:)"
							beginCaptures #(
								1 #(name "keyword.operator.tawa")
								2 #(name "constant.language.tawa")
								3 #(name "keyword.operator.tawa")
							)

							end {(?<=[`"])}

							patterns [
								#(include #empty)
								#(include #~string)
							]
						)
					]
				)

				~ident #(
					match (ident)
				)
			)
		)
	)
)